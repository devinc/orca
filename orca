#!/bin/bash -eu

ORCA_PREFIX=orca
cd "$(dirname "$0")"
base="$(pwd)"

## orca library functions ##
orca_log() {
    echo -n "$(date +'%Y-%m-%d %H:%M:%S') "
    echo "$@" >&2
}

orcabort() {
    orca_log "[!] $@"
    exit 1
}

orca_lxd_init_network() {
    lxc network create orcabr0 ipv6.address=none ipv4.address=10.0.0.1/24 ipv4.nat=true
}

orca_lxd_wait_ready() {
    orca_log "waiting for network: $1"
    local waitscript="while [[ ! -e /etc/resolv.conf || ! -e /home/ubuntu ]] || ! ping -c1 10.0.0.1 &>/dev/null; do sleep 0.1; done"
    lxc exec "$1" -- bash -c "$waitscript"
    # wait for dbus
    lxc exec "$1" -- bash -c "while ! pgrep dbus-daemon &>/dev/null; do sleep 0.1; done"
}

orca_lxd_exists() { lxc config show "$1" &>/dev/null; }

orca_lxd_build_base() {
    local base="${ORCA_PREFIX}-base"
    lxc delete --force "$base" || true
    lxc init ubuntu:18.04 "$base"
    lxc network attach orca "$base" eth0
    lxc start "$base"
    orca_lxd_wait_ready "$base"
    orca_lxd_push_bundle "$base" base
    lxc stop "$base"
}

orca_lxd_clone_base() {
    local base="${ORCA_PREFIX}-base"
    if ! orca_lxd_exists "$base"; then
        orca_log "[+] Building base"
        orca_lxd_build_base
        orca_log "[-] Build finished"
    fi
    if orca_lxd_exists "$name"; then
        orca_log "[+] Deleting old $name"
        lxc delete --force "$name"
    fi
    orca_log "[+] Cloning $base -> $name"
    lxc copy "$base" "$name"
}

# source the service file and set global variables
orca_service_parse() {
    svc="$1"
    vm_name="$ORCA_PREFIX-$service"
    if [[ ! -d "$svc" ]]; then
        orcabort "$svc not found"
    fi
    unset service_{build,prep,setup,deploy,refresh}
    if [[ -e "$1" ]]; then
        . "$1"
    fi
}

# push a tarball into a container
#   args (container bundle)
orca_push_bundle() {(
    local container="$1"
    local bundle="$2"
    shift 2
    [[ ! -d "$bundle" ]] && orcabort "bundle $bundle not found."
    local tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'bundle')
    tgz="$tmpdir/$ORCA_PREFIX-bundle.tar.gz"

    orca_log "pushing $bundle -> $container"
    rm -f "$tgz"
    tar --exclude .git --exclude ./service -C "$bundle" -czf "$tgz" . || exit 1
    lxc file push "$tgz" "${container}/tmp/$ORCA_PREFIX-bundle.tar.gz" || exit 1
    lxc exec "$container" -- tar --no-overwrite-dir -C / -xzf /tmp/$ORCA_PREFIX-bundle.tar.gz || exit 1

    orca_source "$bundle/service"
    if [[ "$(type -t service_setup)" = function ]]; then
        lxc file push "${bundle}/service" "${container}/tmp/$ORCA_PREFIX-service" || exit 1
        local bundle_exec="set -x; cd /tmp; . $ORCA_PREFIX-service; rm -f $ORCA_PREFIX-service $ORCA_PREFIX-bundle.tar.gz; service_setup || exit 1"
        lxc exec "$container" "$@" -- bash -c "$bundle_exec" || {
            rm -rf "$tgz" "$tmpdir"
            exit 1
        }
    fi
    rm -rf "$tgz" "$tmpdir"
)}

orca_usage() {
    echo "orca build SERVICE [SERVICE ...]"
    echo '   - builds the LXD box "'"$ORCA_PREFIX"'-$NAME-build"'
    echo '     using the files in service/$NAME'
    echo '     and the functions in service/$NAME/service'
    echo

    echo "orca deploy SERVICE [SERVICE ...]"
    echo '   - builds SERVICE'
    echo '   - renames '"$ORCA_PREFIX"'-$NAME-build to '"$ORCA_PREFIX"'-$NAME'
    echo '   - runs deploy script'
    echo

    echo "orca refresh SERVICE [SERVICE ...]"
    echo '   - copies the files from service/$NAME/ to the running box named '"$ORCA_PREFIX"'-$NAME'
    echo '   - runs service_build, default implementation just restarts the box.'
    echo
}

## orca commands ##
orca_cmd_build() {
    local vm_build="$vm_name-build"
    orca_service_parse "$1"
    orca_push_bundle "$vm_name" "$svc" || orcabort "push-bundle failed"

    if [[ "$(type -t service_build)" = function ]]; then
        orca_log "[+] Running $svc build()"
        service_build "$vm_build" || orcabort "custom build failed"
    else
        orca_lxd_clone_base "$vm_build" || orcabort "clone failed"
    fi

    if [[ "$(type -t service_prep)" = function ]]; then
        orca_log "[+] Running $svc prep()"
        cd "$svc"
        service_prep "$vm_build"
    fi
}

orca_cmd_deploy() {
    local vm_build="$vm_name-build"
    orca_service_parse "$1"
    orca_log "[+] Building $vm_name"
    orca_cmd_build "$1" || orcabort "build failed"
    # stop and delete old box
    # TODO: rename old box instead of directly deleting it?
    if orca_lxd_exists "$vm_name"; then
        orca_log "[+] Stopping $vm_name"
        lxc stop "$vm_name"
        lxc delete "$vm_name"
    fi
    orca_log "[+] Deploying $vm_build -> $vm_name"
    lxc move "$vm_build" "$vm_name"
    lxc config set "$name" boot.autostart true
    lxc config set "$name" boot.autostart.priority 5
    lxc config set "$name" boot.autostart.delay 0
    if [[ "$(type -t service_deploy)" = function ]]; then
        orca_log "[+] Running $service deploy()"
        service_deploy "$vm_name"
    fi
    orca_log "[+] Starting $vm_name"
    lxc start "$vm_name"
}

orca_cmd_refresh() {
    orca_service_parse "$1"
    orca_push_bundle "$vm_name" "$svc" || orcabort "push-bundle failed"
    if [[ "$(type -t service_refresh)" = function ]]; then
        orca_log "[+] Running $svc refresh()"
        cd "$svc"
        service_refresh "$vm_name"
    else
        orca_log "[+] Restart $vm_name: stop"
        lxc stop "$vm_name"

        orca_log "[+] Restart $vm_name: start"
        lxc start "$vm_name"
    fi
}

orca_cmd_shell() {
    orca_service_parse "$1"
    lxc exec "$vm_name" bash
}

## main function ##
if [[ $# -lt 2 ]]; then
    orca_usage
    exit
fi

cmd="$1"
shift 1

if [[ "$(type -t "orca_cmd_$cmd")" != function ]]; then
    orca_usage
    orcabort "error: cmd not found: $cmd"
fi

# make sure all the services exist before doing anything
for service in "$@"; do
    if [[ ! -d "service/$service" ]]; then
        orcabort "error: service/$service not found"
    fi
done
# run $cmd per service
for service in "$@"; do
    "orca_cmd_$cmd" "$service"
done
